
name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - run: touch ./src/main/resources/application.properties
    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
    - run: cat ./src/main/resources/application.properties

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew clean --stacktrace --info build -x test


    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        push: true
        tags: minjik0525/ndp-back:latest
        
  deploy1:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4      
    
    - name: Deploy 1
      uses: appleboy/ssh-action@master
      env:
          APP: "preonb"
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
      with:
        host: ${{ secrets.REMOTE_IP }}
        username: ${{ secrets.REMOTE_SSH_ID }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        port: ${{ secrets.REMOTE_SSH_PORT }}
        envs: APP, COMPOSE
        script_stop: true
        script: |
            sudo apt update && sudo apt-get install -y \
            apt-transport-https ca-certificates curl gnupg-agent software-properties-common \
            docker-ce
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
            sudo curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            sudo usermod -aG docker ${{ secrets.REMOTE_SSH_ID }}
            newgrp docker

            mkdir -p /home/${{ secrets.REMOTE_SSH_ID }}/compose
            cd /home/${{ secrets.REMOTE_SSH_ID }}/compose
            echo ${{ secrets.COMPOSE }} | base64 --decode > ./docker-compose.yml  
            echo ${{ secrets.NGINX_CONF}} | base64 --decode > ./nginx.conf 

            sudo docker-compose -f /home/ubuntu/compose/docker-compose.yml down
            sudo docker rmi $(docker images -q)
            sudo docker-compose -f /home/ubuntu/compose/docker-compose.yml up -d 

  deploy2:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4      
    
    - name: Deploy 2
      uses: appleboy/ssh-action@master
      env:
          APP: "preonb"
          COMPOSE: "/home/ubuntu/compose/docker-compose.yml"
      with:
        host: ${{ secrets.REMOTE_IP_2 }}
        username: ${{ secrets.REMOTE_SSH_ID }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        port: ${{ secrets.REMOTE_SSH_PORT }}
        envs: APP, COMPOSE
        script_stop: true
        script: |
            sudo apt update && sudo apt-get install -y \
            apt-transport-https ca-certificates curl gnupg-agent software-properties-common \
            docker-ce
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
            sudo curl -L "https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            sudo usermod -aG docker ${{ secrets.REMOTE_SSH_ID }}
            newgrp docker

            mkdir -p /home/${{ secrets.REMOTE_SSH_ID }}/compose
            cd /home/${{ secrets.REMOTE_SSH_ID }}/compose
            echo ${{ secrets.COMPOSE }} | base64 --decode > ./docker-compose.yml  
            echo ${{ secrets.NGINX_CONF}} | base64 --decode > ./nginx.conf 

            sudo docker-compose -f /home/ubuntu/compose/docker-compose.yml down
            sudo docker rmi -f $(docker images -q)
            sudo docker-compose -f /home/ubuntu/compose/docker-compose.yml up -d 
